/*dp[n+1] = dp[n] * (2*i+1)
dp[n]을 2^n 추를 마지막으로 두는 경우의 수라고 할때, (각 경우를 나눠서 전체 경우를 계산)
(n-1)C(k-1) * dp[k-1] * (n-k)! * 2^(n-k) 에서 k를 1부터 n까지 더한 값이다. (C는 combination)
이를 좀더 간편하게 정리하면 (n-1)! / (k-1)! * dp[k-1] * 2^(n-k) 이고,
dp[n+1]과 dp[n]의 관계를 들여다 보면 결국, dp[n+1] = (2*n+1)dp[n]이 된다.

난 좀 쓰레기같이 생각한거 같은데, 유도해낸 결과만 보고 생각해보면 쉽게 보일 수도 있을거 같다.
무게가 2^1 ~ 2^n까지 추를 놓을때, 맨 마지막에 놓는 추를 기준으로 생각해보자
2^n을 마지막에 놓는다면 나머지는 이미 놓아져 있어야 하므로 dp[n-1], 거기다가 2^n은 왼쪽 밖에 올 수 없으므로 1 * dp[n-1]
2^(n-1)을 마지막에 놓는다면 나머지는 이미 놓아져 있어야 하므로 dp[n-1], 거기다가 2^(n-1)은 오른쪽이나 왼쪽 둘다 올 수 있으므로 2 * dp[n-1]
...
2^1을 마지막에 놓는다면 나머지는 이미 놓아져 있어야 하므로 dp[n-1], 거기다가 2^(n-1)은 오른쪽이나 왼쪽 둘다 올 수 있으므로 2 * dp[n-1]
이를 모두 합친 경우의 수는 dp[n] = (2 * n - 1) * dp[n-1]. 
*/
#include <cstdio>

int main()
{
	int m = 1000000009;
	int a = 1;
	int n;
	scanf("%d", &n);

	for (int i = 2; i <= n; i++)
	{
		long long temp = a;
		temp = temp * (2 * i - 1) % m;
		a = temp;
	}


	printf("%d\n", a);

	return 0;
}